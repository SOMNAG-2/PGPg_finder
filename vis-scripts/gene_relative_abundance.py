import os
import argparse
import logging


def gene_relative_abun(pileup_file, basename, output_dir):
    """
    Calculate relative abundance of genes in a file generated by BBMap pileup

    :param pileup_file: coverage depths of genes generated by BBMap pileup
    :param basename: basename of a sample that will be calculated
    :param output_dir: directory to output the results
    :return: None
    """
    logging.info('Gene relative abundance calculation')
    total_ave_fold = float(0)
    file_out = os.path.join(output_dir, basename + '.abundance')
    with open(file_out, 'a') as fo:
        fo.write("#ID\tgene_abundance\n")
    with open(pileup_file) as fi:
        for line in fi:
            if line.startswith('#ID'):
                continue
            else:
                ave_fold = line.split('\t')[1]
                total_ave_fold += float(ave_fold)
    with open(pileup_file) as fi:
        for line in fi:
            if line.startswith('#ID'):
                continue
            else:
                gene_id = line.split('\t')[0]
                ave_fold = line.split('\t')[1]
                gene_abund = (float(ave_fold) / float(total_ave_fold)) * float(1000000)
                with open(file_out, 'a') as fo:
                    fo.write(gene_id + "\t" + str(gene_abund) + "\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Calculate relative abundance of genes')
    parser.add_argument('-p', '--pileup', required=True, help='Input pileup file')
    parser.add_argument('-b', '--basename', required=True, help='Basename of the sample to be calculated')
    parser.add_argument('-o', '--output', required=True, help='Output directory')
    args = parser.parse_args()

    gene_relative_abun(args.pileup, args.basename, args.output)

